typedef struct ListNode ListNode;
typedef struct List List;
typedef struct Graph Graph;
typedef struct MinHeapNode MinHeapNode;
typedef struct MinHeap MinHeap;
ListNode *makeListNode(int dest, int weight);
Graph *makeGraph(int vertices, int directed);
void addEdge(Graph *g, int src, int dest, int weight);
MinHeapNode *makeMinHeapNode(int vertices, int dist);
MinHeap *makeMinHeap(int capacity);
void swap(MinHeapNode **x, MinHeapNode **y);
void minHeapify(MinHeap *mh, int idx);
int isEmpty(MinHeap *mh);
MinHeapNode *extractMin(MinHeap *mh);
void decrKey(MinHeap *mh, int vertices, int dist);
int isInMinHeap(MinHeap *mh, int vertices);
void printPath(int *parent, int j);
int printSolution(int *dist, int v, int *parent, int src);
void dijkstra(Graph *g, int src);
void DFS(Graph *g, int src);
void DFS_inside(Graph *g, int *visited, int src);
void BFS(Graph *g, int src);
void BFS_inside(Graph *g, int *visited, int src, int sw);
